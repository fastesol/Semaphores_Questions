/*
 * The Dining Philosopher Problem states that K philosophers seated around a circular 
 * table with one chopstick between each pair of philosophers. There is one chopstick 
 * between each philosopher. A philosopher may eat if he can pickup the two chopsticks 
 * adjacent to him. One chopstick may be picked up by any one of its adjacent followers
 * but not both.
 */
 
 
 
/* Simple Solution - But Deadlock may occur */
 
int n = 5; // Total Philosophers OR Chopsticks
int *sticks = new Semaphore[n]; // <-- Initialize with 1, means all the Philosophers can start eating at any time

// i'th Philosopher wants to eat
while(true) {
	sticks[i].wait(); // lock on right stick
	sticks[(i+1) % 5].wait(); // lock on left stick
	// EAT
	sticks[i].signal(); // release lock on right stick
	sticks[(i+1) % 5].signal(); // release lock on left stick
}



/* FINAL Solution - With Deadlock avoidance */
int n = 5; // Total Philosophers AND/OR Chopsticks
int *sticks = new Semaphore[n]; // <-- Initialize with 1, means all the Philosophers can start eating at any time
bool isHungary = new bool[n]; // <-- Initialize with false, means no one is hungary currently

// Ith Process/Philosophers
while(true) {
	mutex.wait();
		if(isHungary[(i == 0 ? n-1 : i-1)] == false && isHungary[(i+1) % 5] == false) { // ask previous and next Philosophers if they are hungary, if so, dont start eating.
			isHungary[i] = true;
			sticks[i].wait(); // lock on right stick
			sticks[(i+1) % 5].wait(); // lock on left stick
		}
	mutex.signal();
	
	// DO EATING
	
	mutex.wait();
		isHungary[i] = false;
		sticks[i].signal(); // release lock on right stick
		sticks[(i+1) % 5].signal(); // release lock on left stick
	mutex.signal();
}
